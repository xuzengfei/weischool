<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
  http://www.springframework.org/schema/context   
   http://www.springframework.org/schema/context/spring-context-2.5.xsd
">
	<context:component-scan base-package="com.*" />
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j防御sql注入的filter:wall -->
		<property name="filters" value="log4j" />
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="20" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="1" />
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxOpenPreparedStatements" value="100" />
		<!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。在mysql中通常为select 
			'x'，在oracle中通常为select 1 from dual -->
		<property name="validationQuery" value="select 'x'" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />

	</bean>


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- key的名字前面都要加hibernate. -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">false</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<value>com.*</value>
		</property>
	</bean>


	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!--   <tx:annotation-driven transaction-manager="txManager" />   -->
	 <tx:advice id="txAdvice" transaction-manager="txManager">
	 <!-- 	事务是损耗性能为代价，所以当不需要启用事务就尽量不要启动事务
	 		REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
			SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 
			MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 
			REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 
			NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
			NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 
			NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
			 -->
		<tx:attributes>
			<!-- 以下方法支持事务-->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED"  />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<!-- 以下方法不支持事务，所以不要在里面更新或者添加删除，不起作用 -->
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" /> 
			<tx:method name="datagrid*" read-only="true" propagation="NOT_SUPPORTED" /> 
			<tx:method name="*datagrid" read-only="true" propagation="NOT_SUPPORTED" /> 
			<!-- 除了上面其他方法，支持当前事务，如果当前没有事务，就以非事务方式执行。 -->
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--<aop:advisor pointcut="execution(* com.weischool.service..*.*(..))" advice-ref="txAdvice" />-->
		<aop:advisor pointcut="execution(* com.ws.service..*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.bugframework.auth.service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>  
</beans>
